// -----------------------------------------------------------------------
// Last Modified: Sunday, 13th October 2025 8:00:00 am
// Modified By: Claude Code
// -----------------------------------------------------------------------

package summary

import (
	"context"
	"fmt"
	"time"

	"github.com/ternarybob/arbor"
	"github.com/ternarybob/quaero/internal/interfaces"
	"github.com/ternarybob/quaero/internal/models"
)

// Service generates and maintains summary documents about the corpus
// These summary documents are embedded and searchable via RAG,
// allowing queries like "how many documents are in the system"
type Service struct {
	docStorage   interfaces.DocumentStorage
	docService   interfaces.DocumentService
	eventService interfaces.EventService
	logger       arbor.ILogger
}

// NewService creates a new summary document service
// It automatically subscribes to embedding events to update summaries
func NewService(
	docStorage interfaces.DocumentStorage,
	docService interfaces.DocumentService,
	eventService interfaces.EventService,
	logger arbor.ILogger,
) *Service {
	s := &Service{
		docStorage:   docStorage,
		docService:   docService,
		eventService: eventService,
		logger:       logger,
	}

	// Subscribe to embedding events to update summary after embeddings complete
	s.eventService.Subscribe(interfaces.EventEmbeddingTriggered, s.handleEmbeddingEvent)

	return s
}

// handleEmbeddingEvent handles embedding completion events and generates summary
func (s *Service) handleEmbeddingEvent(ctx context.Context, event interfaces.Event) error {
	s.logger.Info().Msg(">>> SUMMARY SERVICE: Embedding event received, generating corpus summary")

	if err := s.GenerateSummaryDocument(ctx); err != nil {
		s.logger.Error().
			Err(err).
			Msg(">>> SUMMARY SERVICE: Failed to generate summary document")
		return fmt.Errorf("failed to generate summary: %w", err)
	}

	s.logger.Info().Msg(">>> SUMMARY SERVICE: Summary generation completed successfully")
	return nil
}

// GenerateSummaryDocument creates/updates a special summary document
// containing metadata about the document corpus
func (s *Service) GenerateSummaryDocument(ctx context.Context) error {
	s.logger.Info().Msg("Generating corpus summary document")

	// Get document counts by source type
	totalDocs, err := s.docStorage.CountDocuments()
	if err != nil {
		return fmt.Errorf("failed to count total documents: %w", err)
	}

	jiraDocs, err := s.docStorage.CountDocumentsBySource("jira")
	if err != nil {
		return fmt.Errorf("failed to count jira documents: %w", err)
	}

	confluenceDocs, err := s.docStorage.CountDocumentsBySource("confluence")
	if err != nil {
		return fmt.Errorf("failed to count confluence documents: %w", err)
	}

	// Get embedded document count
	embeddedDocs, err := s.docStorage.CountVectorized()
	if err != nil {
		return fmt.Errorf("failed to count embedded documents: %w", err)
	}

	// Generate summary content
	now := time.Now().UTC()
	content := fmt.Sprintf(`QUAERO DOCUMENT CORPUS SUMMARY

This document contains metadata about the Quaero document corpus.
It is automatically generated and updated to provide queryable information
about the system's knowledge base.

Last Updated: %s

CORPUS STATISTICS:
- Total Documents: %d
- Jira Issues: %d
- Confluence Pages: %d
- Embedded Documents: %d
- Unembedded Documents: %d

SOURCE BREAKDOWN:
The corpus contains documents from multiple sources:
1. Jira: Project management and issue tracking documents (%d total)
2. Confluence: Wiki pages and documentation (%d total)

EMBEDDING STATUS:
Documents with embeddings: %d
Documents pending embedding: %d

This summary is updated automatically on the same schedule as embeddings
(every 5 minutes via the scheduler) and at application startup.

Questions you can ask about this data:
- "How many documents are in the system?"
- "How many Jira issues are indexed?"
- "How many Confluence pages are available?"
- "What is the total document count?"
- "How many documents have embeddings?"
`,
		now.Format(time.RFC3339),
		totalDocs,
		jiraDocs,
		confluenceDocs,
		embeddedDocs,
		totalDocs-embeddedDocs,
		jiraDocs,
		confluenceDocs,
		embeddedDocs,
		totalDocs-embeddedDocs,
	)

	// Create document with well-known ID
	lastSynced := now
	summaryDoc := &models.Document{
		ID:                "corpus-summary-metadata",
		SourceID:          "system",
		SourceType:        "system",
		Title:             "Quaero Corpus Summary - Document Statistics and Metadata",
		Content:           content,
		LastSynced:        &lastSynced,
		CreatedAt:         now,
		UpdatedAt:         now,
		ForceEmbedPending: true, // Always force re-embedding when updated
		Embedding:         nil,  // Will be generated by embedding coordinator
		EmbeddingModel:    "",
	}

	// Save document (upsert by ID)
	if err := s.docService.SaveDocuments(ctx, []*models.Document{summaryDoc}); err != nil {
		return fmt.Errorf("failed to save summary document: %w", err)
	}

	s.logger.Info().
		Int("total_docs", totalDocs).
		Int("jira_docs", jiraDocs).
		Int("confluence_docs", confluenceDocs).
		Int("embedded_docs", embeddedDocs).
		Msg("Corpus summary document generated successfully")

	return nil
}
